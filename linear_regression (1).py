# -*- coding: utf-8 -*-
"""Linear_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RnKcbt4ChmTxydv8yR6AGjFuo0z0z599

CRIM - per capita crime rate by town
ZN - proportion of residential land zoned for lots over 25,000 sq.ft.
INDUS - proportion of non-retail business acres per town.
CHAS - Charles River dummy variable (1 if tract bounds river; 0 otherwise)
NOX - nitric oxides concentration (parts per 10 million)
RM - average number of rooms per dwelling
AGE - proportion of owner-occupied units built prior to 1940
DIS - weighted distances to five Boston employment centres
RAD - index of accessibility to radial highways
TAX - full-value property-tax rate per $10,000
PTRATIO - pupil-teacher ratio by town
B - 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town
LSTAT - % lower status of the population
MEDV - Median value of owner-occupied homes in $1000's

"
"""

import pandas as pd
df = pd.read_csv("/content/BostonHousing.csv")
df

df.describe()

df.columns

x = df[['crim', 'zn', 'indus', 'chas', 'nox', 'rm', 'age', 'dis', 'rad', 'tax',
       'ptratio','lstat']] # Divide data  into feature

x

y = df["medv"] #target data
y

y

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x,y)

y_pred = model.predict(x)
y_pred

df["y_pred"]=y_pred
df

model.score(x,y_pred)

model.score(x,y)

x

model.predict([[0.00641,0,2.30,0,0.590,6.8,70,4.0901,1,298,15.7,4.90]])

y

model.predict([[0.00641,0,2.30,0,0.590,6.8,70,4.0901,2,298,15.7,4.90]])

z = df['age']
z

import matplotlib.pyplot as plt
plt.scatter(z,y)
plt.xlabel("Age")
plt.ylabel("Cost")

model.predict([[0.00641,0,2.30,0,0.590,6.8,70,4.0901,1,298,15.71,4.92]])

"""#Corelation"""

df

from sklearn.model_selection import train_test_split, cross_val_score
x_train,x_test,y_train,y_test=train_test_split(x,y)

x_train

y_train

model.fit(x_train,y_train)

model.score(x_train,y_train)

model.predict(x)

model.score(x_test,y_test)

y_predd = model.predict(x_test)
y_predd

df["y_predd"]=y_pred
df



df

df

from sklearn.preprocessing import MinMaxScaler, StandardScaler
df.columns

262+137+107

var = df[['age','y_predd']]
 var

from sklearn.cluster import KMeans
import warnings
warnings.simplefilter("ignore")
k_rang = range(1,11)
list1 = []
for k in k_rang:
  km = KMeans(n_clusters = k)
  km.fit(var)
  list1.append(km.inertia_)

list1

import matplotlib.pyplot as plt
plt.plot(k_rang, list1, "md--")
plt.xlabel("Number of Clusters")
plt.ylabel("Sum of Sqaured Errors{SSE}")
plt.title("Elbow Graph")

kmn = KMeans(n_clusters = 3)
p = kmn.fit_predict(var)
p

df['clusters']=p
df

df4=df[df['clusters']==0]
df4

df4

df4.drop('y_pred',axis=1,inplace=True)
df4

df5=df[df['clusters']==1]
df5

df5

df6 = df[df['clusters']==2]
df6

plt.scatter(df4["age"],df4["medv"],c="red")
plt.scatter(df5["age"],df5["medv"],c="black")
plt.scatter(df6["age"],df6["medv"],c="green")
plt.xlabel("Age")
plt.ylabel("Cost")

varr = df[df['crim'] >=0.5]
varr

varr2 = df[df['crim']<=0.2]
varr2